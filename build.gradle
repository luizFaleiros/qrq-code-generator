plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'jacoco'
}

group = 'qr.code'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.google.zxing:javase:3.3.0'
    implementation 'software.amazon.awssdk:s3:2.31.35'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.4'
    implementation platform('io.micrometer:micrometer-bom:1.14.6')
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.opentelemetry:opentelemetry-api'
    implementation 'io.opentelemetry:opentelemetry-sdk'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    implementation 'io.prometheus:prometheus-metrics-exporter-httpserver'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.26.1'
    configFile = file("${project.rootDir}/config/checkstyle/google_checks.xml")
    sourceSets = [sourceSets.main, sourceSets.test]
    ignoreFailures = false
    maxWarnings = 0
}
jacoco {
    toolVersion = '0.8.13'
    reportsDirectory = layout.buildDirectory.dir('jacoco-reports')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacoco-html')
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'qr/code/generator/QrCodeGeneratorApplication.class',
                'qr/code/generator/configuration/**',
                'qr/code/generator/dto/**',
                'qr/code/generator/exception/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    
    violationRules {
        rule {
            element = 'PACKAGE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            excludes = [
                'qr.code.generator.QrCodeGeneratorApplication',
                'qr.code.generator.configuration.*',
                'qr.code.generator.dto.*',
                'qr.code.generator.exception.*'
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}